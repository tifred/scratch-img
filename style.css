@import url(http://weloveiconfonts.com/api/?family=entypo|zocial);

/* entypo */
[class*="entypo-"]:before {
  font-family: 'entypo', sans-serif;
}

/* zocial */
[class*="zocial-"]:before {
  font-family: 'zocial', sans-serif;
}

body, html {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
  font-family: 'Lobster', cursive;
  font-size: 38px;
}

main {
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.26);
  width: 100%;
  margin-left: auto;
  margin-right: auto;
}

h1, h2, h3, h4, h5 {
  margin: 0;
}

header, nav, footer, section, article, div {
  box-sizing: border-box;
}

/* fails.Looks good but it crops as window shrinks.
.horse {
  width: 640px;
  height: 360px;
}
*/

/* fails. too.  pixelates as it gets big
100% here refers to the size of the container element, I guess.
It gets bigger as the viewport gets bigger.
.horse {
  width: 100%;
}
*/

/* this works.
the 100% here must refer to the natural size
of the image.  doesn't make much sense to me.  
.horse {
  max-width: 100%;
  max-height: 100%;
}
*/

/* this works too.  it's only useful if there will 
be two images side by side and you want to calc the
width percentage on the fly, minus a fixed margin.
.horse {
  max-width: 640px;
  width: calc((100% - 10px) / 1);
} 
*/

/* Given the last example, this ought to work also: */
.horse {
  max-width: 640px;
  width: 100%;
}
/*...and it does.  confusing! */
/* I guess it is better, for single pictures, to stick with 
simply setting max-width: 100%.  */


.foo {
  padding: 50px;
  background: linear-gradient(green, red);
  border-radius: 100px;
  box-shadow: 10px 10px 30px 0 black;
  animation: spin 2s;
}

/*
.backky {
  background-image: url(http://placehold.it/350x150);
}
*/

